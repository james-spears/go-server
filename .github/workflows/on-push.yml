name: Acceptance Test
on:
  push:
    branches: [main, dev]
  workflow_dispatch:

jobs:
  acceptance-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: '^1.19.0'

      - name: Unit test
        run: |
          go test ./... -coverprofile=cover.out && go tool cover -html=cover.out

  version-bump:
    needs: acceptance-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: '^1.19.0'

      - name: Tidy mod
        run: |
          go mod tidy

      - name: Unit test
        run: |
          go test ./...

      - name: Bump version
        id: version-bump
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - run: git config --global user.name 'James Spears ðŸ¤–'
      - run: git config --global user.email 'james.w.spears@gmail.com'
      - run: git fetch --prune --unshallow --tags

      - name: Patch version
        if: endsWith(github.ref, '/main')
        run: echo "version=$(git describe --tags `git rev-list --tags --max-count=1` | awk 'BEGIN { FS="." } { $3++; } { printf "v%d.%d.%d\n", $1, $2, $3 }')" >> $GITHUB_ENV

      - name: Prepatch version
        if: endsWith(github.ref, '/dev')
        run: echo "version=$(git describe --tags `git rev-list --tags --max-count=1` | awk 'BEGIN { FS="[.|-]" } { if ($4 == "") $3++; if ($4 >= 0 ) $4++; } { printf "v%d.%d.%d-%d\n", $1, $2, $3, $4 }')" >> $GITHUB_ENV

      - run: sed -i -e '1i${{ env.version }}\' .versions
      - run: git add go.mod go.sum .versions
      - run: git commit -m "Bump version ${{ env.version }} [skip ci]"
      - run: git push
      - run: git tag ${{ env.version }}
      - run: git push origin --tags

  generate-package:
    needs: version-bump
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Set env
        id: vars
        shell: bash
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Set env to production
        if: "!contains(github.event.release.name, '-')"
        run: |
          echo "deployment=production" >> $GITHUB_ENV
      - name: Set env to staging
        if: contains(github.event.release.name, '-')
        run: |
          echo "deployment=staging" >> $GITHUB_ENV

      - name: Setup Docker QEMU
        uses: docker/setup-qemu-action@v1

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: GitHub registry login
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build-and-push
        if: "!contains(github.event.release.name, '-')"
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ steps.vars.outputs.sha_short }}

      - name: Build-and-push
        if: "contains(github.event.release.name, '-')"
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ steps.vars.outputs.sha_short }}

  create-release:
    needs: generate-package
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Determine version
        run: |
          git fetch -a
          echo "version=$(git describe --tags `git rev-list --tags --max-count=1`)" >> $GITHUB_ENV

      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.version }}
          release_name: Release ${{ env.version }}
          body: |
            ${{ env.version }} is an automated release ðŸ¤–.
          draft: false
          prerelease: contains(env.version, '-')
